pipeline {
	environment {
	    registry = 'guerinog/demojunitmaven'
	    registryCredential = 'dockerhubguerinog'
	    dockerImage = ''
	}
    agent any
    stages {
	// ### INIZIO CLONAZIONE DA GIT ###
        stage('Clonazione da Git'){
            steps{
            	echo "Clonazione Git"
                cleanWs()
				git credentialsId: 'f8db74b3-0315-4066-a99a-8bffccc42b81', url: 'https://github.com/guerinog/DemoJunitMaven.git'
            }
        }
	// ### FINE CLONAZIONE DA GIT ###
	
	// ### INIZIO MAVEN ###
        stage('Build con Maven'){
            steps{
	          	bat "mvn clean install -DskipTests"
            }
        }
        
        stage('Eseguo i Test e Genero i reports'){
       	 	steps{
        		bat "mvn clean verify -DskipITs=true"
        		junit 'target/surefire-reports/TEST-*.xml'
        	}
        }	
	// ### FINE MAVEN ###
	// ### INIZIO DOCKER ###
	/* stage('Costruisco immagine') {
		steps {
			sh 'docker login -u ${DOCKER_REGISTRY_CREDENTIALS_USR} -p ${DOCKER_REGISTRY_CREDENTIALS_PSW} registry.gitlab.com'
			sh 'docker build -t ${IMAGE}:${BRANCH_NAME} .'
			sh 'docker push ${IMAGE}:${BRANCH_NAME}'
		}
	} */
        stage('Costruisco immagine') {
      		steps{
		        script {
		            echo "Costruisco immagine :$BUILD_NUMBER"
		            dockerImage = docker.build registry + ":$BUILD_NUMBER"
		        }
      		}
    	} 
    	stage('Deploy Image su DockerHub') {
	    	steps{
		        script {
		            echo "Deploy Image su DockerHub" 
		            docker.withRegistry( '', registryCredential ) {
		            dockerImage.push()
		         }
		       }
			}
		}
		/*
		stage('Cancella l immagine creata') {
		      steps{
		         echo "Cancella l immagine creata $registry:$BUILD_NUMBER sulla macchina"
		         bat "docker rmi $registry:$BUILD_NUMBER"
		      }
		}
		*/
		stage('Creo il Container') {
		    steps {
		        echo "Creo il Container test sulla macchina"
			echo "se c'Ã¨ un container di nome test lo elimino"
		        bat "docker rm -f test || true"
			echo "Espongo la porta di spring boot 8787 sulla porta localhost 8123"
		        bat "docker run --name test -p 8787:8787 -d $registry:$BUILD_NUMBER"
		    }
		}
		stage('Cancella Immagini non utilizzate') {
		    steps {
		        echo "Cancella Immagini non utilizzate"
		    	bat "docker image prune -a -f"
		    }
		}
	// ### FINE DOCKER ###
	
	// ### INIZIO JMETER ###
	 stage('Eseguo i Test JMETER'){
       	 	steps{
        		bat "C:/apache-jmeter-5.4.3/apache-jmeter-5.4.3/bin/jmeter -j jmeter.save.saveservice.output_format=xml -n -t demoJmeter.jmx -l reportJenkins.jtl"
			//step([$class: 'ArtifactArchiver', artifacts: 'reportJenkins.jtl'])
			perfReport 'reportJenkins.jtl'
        	}
        }
	// ### FINE JMETER ###
    }
	
  post {
    success {
      mail to: "pascale.graziano@gmail.com", subject:"SUCCESS: ${currentBuild.fullDisplayName}", body: "Yay, we passed."
    }
    failure {
      mail to: "pascale.graziano@gmail.com", subject:"FAILURE: ${currentBuild.fullDisplayName}", body: "Boo, we failed."
    }
  }
}
